{"version":3,"sources":["index.ts"],"names":["setupMiddleware","bp","events","registerMiddleware","description","direction","handler","outgoingHandler","name","order","event","next","type","channel","pictureUrl","payload","url","console","log","write","err","quest","state","user","active_quest","quest_step","q_sub","onServerStarted","onServerReady","onBotMount","botId","onBotUnmount","onFlowChanged","flow","botTemplates","id","desc","skills","entryPoint","definition","menuIcon","menuText","noInterface","fullName","homepage"],"mappings":";;;;;;;;AACA;;AAIA;;AAEA;;AACA;;;;AAEO,eAAeA,eAAf,CAA+BC,EAA/B,EAA+C;AACpDA,EAAAA,EAAE,CAACC,MAAH,CAAUC,kBAAV,CAA6B;AAC3BC,IAAAA,WAAW,EACT,oBAFyB;AAG3BC,IAAAA,SAAS,EAAE,UAHgB;AAI3BC,IAAAA,OAAO,EAAEC,eAJkB;AAK3BC,IAAAA,IAAI,EAAE,oBALqB;AAM3BC,IAAAA,KAAK,EAAE;AANoB,GAA7B;;AASA,iBAAeF,eAAf,CAA+BG,KAA/B,EAA4DC,IAA5D,EAAiG;AAC/F,QAAID,KAAK,CAACE,IAAN,KAAe,OAAnB,EAA4B;AAC1B,UAAIF,KAAK,CAACG,OAAN,KAAkB,eAAtB,EAAuC;AACrC,cAAMC,UAAU,GAAGJ,KAAK,CAACK,OAAN,CAAcC,GAAjC;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACA,yBAAG,sBAAQA,UAAR,CAAH,EACGK,KADH,CACS,oCADT,EAC+C,UAAUC,GAAV,EAAe;AAC1D,cAAI,CAACA,GAAL,EAAU;AAAEH,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAAqB,WAAjC,MACK;AAAED,YAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AAAkB;AAC1B,SAJH;AAKD;;AACD,YAAMC,KAAK,GAAGX,KAAK,CAACY,KAAN,CAAYC,IAAZ,CAAiBC,YAA/B;AACA,YAAMC,UAAU,GAAGf,KAAK,CAACY,KAAN,CAAYC,IAAZ,CAAiBG,KAApC;AAED,KAbD,MAaO;AACL,aAAOf,IAAI,EAAX;AACD,KAhB8F,CAkB/F;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;AACF,C,CAGD;;;AACA,MAAMgB,eAAe,GAAG,MAAO1B,EAAP,IAA0B;AAChD,QAAMD,eAAe,CAACC,EAAD,CAArB;AACD,CAFD,C,CAIA;;;AACA,MAAM2B,aAAa,GAAG,MAAO3B,EAAP,IAA0B;AAC9C,QAAM,kBAAIA,EAAJ,CAAN;AACD,CAFD,C,CAIA;;;AACA,MAAM4B,UAAU,GAAG,OAAO5B,EAAP,EAAuB6B,KAAvB,KAAyC,CAAG,CAA/D,C,CAEA;;;AACA,MAAMC,YAAY,GAAG,MAAOD,KAAP,IAAyB,CAAG,CAAjD,C,CAEA;;;AACA,MAAME,aAAa,GAAG,OAAO/B,EAAP,EAAuB6B,KAAvB,EAAsCG,IAAtC,KAAyD,CAAG,CAAlF;AAEA;;;;;;AAIA,MAAMC,YAA+B,GAAG,CAAC;AAAEC,EAAAA,EAAE,EAAE,aAAN;AAAqB3B,EAAAA,IAAI,EAAE,UAA3B;AAAuC4B,EAAAA,IAAI,EAAG;AAA9C,CAAD,CAAxC;AAEA;;;;;AAIA,MAAMC,MAAmB,GAAG,EAA5B;AAEA,MAAMC,UAAgC,GAAG;AACvCX,EAAAA,eADuC;AAEvCC,EAAAA,aAFuC;AAGvCC,EAAAA,UAHuC;AAIvC;AACAG,EAAAA,aALuC;AAMvCE,EAAAA,YANuC;AAOvCG,EAAAA,MAPuC;AAQvCE,EAAAA,UAAU,EAAE;AACV;AACA/B,IAAAA,IAAI,EAAE,cAFI;;AAGV;;;;AAIAgC,IAAAA,QAAQ,EAAE,MAPA;AAQV;AACAC,IAAAA,QAAQ,EAAE,cATA;AAUV;AACAC,IAAAA,WAAW,EAAE,KAXH;AAYV;AACAC,IAAAA,QAAQ,EAAE,cAbA;AAcV;AACAC,IAAAA,QAAQ,EAAE;AAfA;AAR2B,CAAzC;eA2BeN,U","sourceRoot":"/home/elrond/bot/dev2/modules/photo-magick/src/backend","sourcesContent":["import * as sdk from 'botpress/sdk'\nimport 'bluebird-global'\n// import https from 'https'\nimport { Config } from '../config'\n\nimport api from './api'\nimport fs from 'fs'\nimport request from 'request'\nimport gm from 'gm'\n\nexport async function setupMiddleware(bp: typeof sdk) {\n  bp.events.registerMiddleware({\n    description:\n      'Make magick happen',\n    direction: 'incoming',\n    handler: outgoingHandler,\n    name: 'photo.sendMessages',\n    order: 101\n  })\n\n  async function outgoingHandler(event: sdk.IO.IncomingEvent, next: sdk.IO.MiddlewareNextCallback) {\n    if (event.type === 'image') {\n      if (event.channel === 'odnoklassniki') {\n        const pictureUrl = event.payload.url\n        console.log(pictureUrl)\n        gm(request(pictureUrl))\n          .write('/home/elrond/bot/dev2/reformat.jpg', function (err) {\n            if (!err) { console.log('done') }\n            else { console.log(err) }\n          });\n      }\n      const quest = event.state.user.active_quest\n      const quest_step = event.state.user.q_sub\n\n    } else {\n      return next()\n    }\n\n    // const client: OdnoklassnikiClient = clients[event.botId]\n    // if (!client) {\n    //   return next()\n    // }\n    // console.log('!!!!!!!!!!!!!!!!!!!!!')\n    // console.log(event)\n    // return client.handleOutgoingEvent(bp, event, next)\n  }\n}\n\n\n// This is called when server is started, usually to set up the database\nconst onServerStarted = async (bp: typeof sdk) => {\n  await setupMiddleware(bp)\n}\n\n// At this point, you would likely setup the API route of your module.\nconst onServerReady = async (bp: typeof sdk) => {\n  await api(bp)\n}\n\n// Every time a bot is created (or enabled), this method will be called with the bot id\nconst onBotMount = async (bp: typeof sdk, botId: string) => { }\n\n// This is called every time a bot is deleted (or disabled)\nconst onBotUnmount = async (botId: string) => { }\n\n// When anything is changed using the flow editor, this is called with the new flow, so you can rename nodes if you reference them\nconst onFlowChanged = async (bp: typeof sdk, botId: string, flow: sdk.Flow) => { }\n\n/**\n * This is where you would include your 'demo-bot' definitions.\n * You can copy the content of any existing bot and mark them as \"templates\", so you can create multiple bots from the same template.\n */\nconst botTemplates: sdk.BotTemplate[] = [{ id: 'my_bot_demo', name: 'Bot Demo', desc: `Some description` }]\n\n/**\n * Skills allows you to create custom logic and use them easily on the flow editor\n * Check this link for more information: https://botpress.com/docs/developers/create-module/#skill-creation\n */\nconst skills: sdk.Skill[] = []\n\nconst entryPoint: sdk.ModuleEntryPoint = {\n  onServerStarted,\n  onServerReady,\n  onBotMount,\n  // onBotUnmount,\n  onFlowChanged,\n  botTemplates,\n  skills,\n  definition: {\n    // This must match the name of your module's folder, and the name in package.json\n    name: 'photo-magick',\n    /**\n     * When menuIcon is set to `custom`, you need to provide an icon. It must be at that location: `/assets/icon.png`\n     * Otherwise, use Material icons name: https://material.io/tools/icons/?style=baseline\n     */\n    menuIcon: 'flag',\n    // This is the name of your module which will be displayed in the sidebar\n    menuText: 'Photo Magick',\n    // When set to `true`, the name and icon of your module won't be displayed in the sidebar\n    noInterface: false,\n    // The full name is used in other places, for example when displaying bot templates\n    fullName: 'Photo Magick',\n    // Not used anywhere, but should be a link to your website or module repository\n    homepage: 'https://botpress.com'\n  }\n}\n\nexport default entryPoint\n"]}